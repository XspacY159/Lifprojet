//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""GameplayInputs"",
            ""id"": ""8c3e37c3-ade0-4f4e-a19f-4481813e0a06"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""07af02c2-bf33-4a97-9f0c-574f678a141b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovements"",
                    ""type"": ""Value"",
                    ""id"": ""dc3e0348-754e-4320-9543-08a6e775999e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""606ffd37-be7f-4b15-8f27-29b5bbd4cdff"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e821f45f-91cd-45ca-bd07-a574c162958d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""dee29209-266d-49f5-86f5-a49cc2979930"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""5905f45f-10d6-4d15-8835-2ff931fa19ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5b0b3bd4-c2ba-4751-b5bf-22fd2c4cc10d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5a3a4f0d-3833-428c-9e42-e08019444f66"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayInputs
        m_GameplayInputs = asset.FindActionMap("GameplayInputs", throwIfNotFound: true);
        m_GameplayInputs_Escape = m_GameplayInputs.FindAction("Escape", throwIfNotFound: true);
        m_GameplayInputs_CameraMovements = m_GameplayInputs.FindAction("CameraMovements", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayInputs
    private readonly InputActionMap m_GameplayInputs;
    private List<IGameplayInputsActions> m_GameplayInputsActionsCallbackInterfaces = new List<IGameplayInputsActions>();
    private readonly InputAction m_GameplayInputs_Escape;
    private readonly InputAction m_GameplayInputs_CameraMovements;
    public struct GameplayInputsActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayInputsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_GameplayInputs_Escape;
        public InputAction @CameraMovements => m_Wrapper.m_GameplayInputs_CameraMovements;
        public InputActionMap Get() { return m_Wrapper.m_GameplayInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayInputsActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayInputsActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @CameraMovements.started += instance.OnCameraMovements;
            @CameraMovements.performed += instance.OnCameraMovements;
            @CameraMovements.canceled += instance.OnCameraMovements;
        }

        private void UnregisterCallbacks(IGameplayInputsActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @CameraMovements.started -= instance.OnCameraMovements;
            @CameraMovements.performed -= instance.OnCameraMovements;
            @CameraMovements.canceled -= instance.OnCameraMovements;
        }

        public void RemoveCallbacks(IGameplayInputsActions instance)
        {
            if (m_Wrapper.m_GameplayInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayInputsActions @GameplayInputs => new GameplayInputsActions(this);
    public interface IGameplayInputsActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnCameraMovements(InputAction.CallbackContext context);
    }
}
